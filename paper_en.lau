\documentclass{article}
\usepackage{xltxtra, polyglossia,url,multicol,hyperref}
\setdefaultlanguage{english}
%\setmainfont{Cambria}

\usepackage[a4paper]{geometry}
\textwidth=17cm
\textheight=25cm
\hoffset -20mm
\voffset -20mm
\begin{document}
\def\kap#1\par{\section{#1}}
\def\pkap#1\par{\subsection{#1}}
\def\npkap#1\par{\subsection*{#1}}
\def\ppkap#1\par{\subsubsection{#1}}
\def\nazev#1\par{\section*{\huge #1}}
\def\autori#1\par{\begin{center}\itshape#1\end{center}}
\def\uv#1{„#1“}

\nazev Methods of Electronic Control of Model Railway Track

\autori doc. Ing. Jiří Rybička, Dr.$^1$, Mgr. Jan Horáček$^2$, Ing. Robert Čížek$^1$

$^1$Mendel University in Brno, Faculty of Business and Economics, Zemědělská 1, 613 00 Brno, Czech Republic\\
$^2$Masaryk University in Brno, Faculty of informatics, Botanická 68a, 612 00 Brno, Czech Republic

\newpage
\nazev Methods of Electronic Control of Model Railway Track

\bigskip\noindent {\bfseries Abstract}

Digital control of a model railway track requires control of the movement of
vehicles and their functions (sounds, lighting) and control of track-side elements
(switches, signals, occupancy detectors, etc.). While the control of the vehicles is
given by a standard whose functionality is perfectly adequate for normal
operation, the control of track-side elements can be handled by more ways. For
small domestic tracks, commercial solutions are available from several
companies, but for large tracks there is no such concept and the solution is
usually made tailored to the application (club tracks, simulators for training
of railway operators). Track in the Railway Vehicles
Control Laboratory of the Faculty of Business and Economics of Mendel
University in Brno can be categorised as large, therefore a specific system is
necessary. However, the existing one is not suitable for several fundamental
reasons. Therefore, a modernised system has been developed; the overall
concept and methods are part of the design management of the large track.
The result is a system that meets the relatively demanding requirements
and enables further development and use in the laboratory.

\medskip
Keywords: model railway, electronic control, communication protocol,
MTB, interlocking, Railway Vehicles Control Laboratory

\medskip
JEL classification: O32

\begin{multicols}2
\kap Introduction

The Railway Vehicles Control Laboratory is a specialised workplace
with two model railways covering an area of over 200~m$^2$. The basic purpose
of the laboratory is to be used in teaching, primarily as a teaching instrument for
program control of technological units and consequently programming in general.
It is also used for thesis work on various technical aspects
of operation (automatic train diversion, shuttle operation of motorised passenger
trains, etc.). The track represents a digitally controlled technological unit,
whose design has been adapted to the standards used by the Model Railway Club
Brno I, in whose cooperation the laboratory was created and is operated.

\kap Current state

Digital control of a relatively large track requires approaches that are
different from the controlling of a small \uv{home} tracks. The basic criteria
that a system for managing larger tracks must meet are derived by Horáček
(2021b, p.\,13). After some modification for the needs of the laboratory taken
into account, the criteria can be summarized in the following partially
interrelated points:

\begin{enumerate}
\item Ability to support hundreds of track-side elements (signals, switches, etc.)
with several types of electric interfaces.
\item Sustainability over time -- the concept should be usable over several decades,
i.e., built on the generic components that are expected to be available for a
long time in their current or compatible form.
\item Extensibility of supported functions -- new types of modules could be
added in future.
\item Acceptable financial demandingness.
\item Two-way communication with the control computer, ability to detect the correct
functionality of modules.
\item Independence from proprietary enterprise solutions (for sustainability
over time, but also for acceptable financial requirements).
\item Ability to operate in a way that mimics a real railway.
\end{enumerate}

Although various electronic control components are available on the market,
they are mostly intended for the general consumer, i.e. amateurs working in
domestic conditions, and therefore usually do not meet some of the criteria
defined above.

Let us briefly mention in practice frequent solutions.

\pkap Digital Command Control

The Digital Command Control (\textit{DCC}) \cite{DCC} is probably
the most widely used system for digital control of model railways. There are no
studies to confirm this, but it can be inferred from the number of components
we see on the market. DCC is an open standard created by the National Model
Railroad Association (\url{nmra.org}). DCC unifies controlling of both
track-side and mobile units.

Basic properties: main element of the system is the \textit{command station}
transmitting DCC signal to control train movement and track accessories. The
signal was designed as unidirectional, to obtain status of the
elements in the track a second bus, called \textit{feedback bus}, is used. The
bus is controlled by the command station, which inquiries feedback modules
for data. The command station can be connected to a computer over another
communication bus -- \textit{throttle bus} (e.g. LocoNET, XpressNET). In the current
state-of-the-art deployments, neither vehicle nor track-side decoders
acknowledge receiving of the DCC command to the command station, which may lead
to a failure (non-delivery of the command or failure to execute the command for
various reasons). Schematic of DCC track control is shown in Figure
\ref{schemaDCC}.
\end{multicols}

\begin{figure}[ht]
\center
\includegraphics[width=.5\textwidth]{data/dcc_schema}
\caption{Typical schematic of a DCC system.
Modified according to Wikipedia \cite{DCC-wiki}}
\label{schemaDCC}
\end{figure}

\hrule
\begin{multicols}2

There is no standard for how the feedback bus works, therefore various
possibilities have been developed: S88 \cite{S88}, RSbus
\cite{RSbus} or LocoNET \cite{LocoNET}. The latter
is a licensed bus created by Digitrax and its full use is subject to licensing fees.
However, it supports two-way communication, allowing direct commanding of
track devices without the need for DCC signal.

Typical limitation of the DCC system is a relatively small maximum number of
feedback modules. Big railways usually address this issue by dividing the
track into sufficiently small isolated areas and operating independent modules in
each area (applied, for example, to very large track in the Railway Kingdom in
Prague, presented on professional excursion in 2015).

\pkap BiDiB

BiDiB (BiDirectional Bus) is an open bus designed by a community of model
railroaders \cite{BiDiB}. It is based on RS485, several types of
modules exist, communication protocol is available online. However, BiDiB is
just a protocol specification, no schematics nor PCB designs nor firmwares are
available by BiDiB. BiDiB fulfills basically all the criteria defined above.

\pkap MTB

The MTB v2 system (Model Train Bus) \cite{MTB} is currently
used in the laboratory. It allows to control hundreds of track-side elements.

Control of the whole track is divided into two different parts:

\begin{itemize}

\item Vehicle control -- not addressed in the MTB system. For example the DCC
system with extended loco addresses can be used.

\item Track-side (accessory) control -- here, on the other hand, the MTB concept
departs from the commercial concepts (the DCC system in commercial solutions
typically controls accessories as well, as already mentioned in the relevant
section).

\end{itemize}

Separating the accessory control from vehicle control provides a number of
advantages. Single communication bus \textit{MTBbus} is used for both commanding track-side
equipment and obtaining information from it, which allows for simpler (cheaper)
design, own design brings high extensibility, fast bug fixing, independence
on commercial manufacturers and other benefits connected with in-house solution.

Own design is not beneficial for vehicle control, because in this area, open
protocols exists \cite{DCC}, thus risk of vendor-lock is minimized and price of the components
is quite low due to competitive environment on the market.

It is then possible to build software support over both parts to allow to mimic
the behavior of the signalling equipment on a real railway, which is a
significant advantage for the teaching purposes of the laboratory.

\ppkap Technical description

Complex scheme incorporating both DCC and MTB systems is presented in
Fig.\,\ref{mtb_schema}.

MTB system consists of:

\begin{enumerate}
\item MTBbus protocol specification. MTBbus is RS485 max. 115200 Bd
single-master bus.
\item MTB-USB module, which creates interface between MTBbus and PC (via USB). It
is master on MTBbus. It performs all real-time operations on MTBbus.
\item Specification of protocol between MTB-USB and PC.
\item MTB modules. There are various MTB v2 modules: MTB-UNI (universal -- 16
digital inputs with IR point detectors support, 16 open-collector outputs),
MTB-UNIm (same as MTB-UNI, but without IR support), MTB-TTL (16 digital inputs,
16 TTL outputs), MTB-REG (8 powerful analog outputs), MTB-POT (8 analog inputs).
\item Software support in PC (libraries for connecting to MTB-USB etc.).
\end{enumerate}

More comprehensive specification of MTB v2 is available at
\url{https://mtb.kmz-brno.cz/cz/v2}, unformtunately in czech language only.

\end{multicols}

\begin{figure}[ht]
\center
\includegraphics[width=\textwidth]{data/mtb_schema.pdf}
\caption{Track control architecture in RVCL before modernization}
\label{mtb_schema}
\end{figure}

\hrule
\begin{multicols}2

\ppkap Shortcomings of the current MTB system

As complexly illustrated in the figure \ref{mtb_schema}, the system is capable
of controlling large tracks. The diagram describes an architecture of railway in
MRC Brno I and in the Railway Vehicles Control Laboratory of the FBE MENDELU.
This allows interchange of hardware, software and know-how between the Club and
the faculty.

Unfortunately, however, the accessory control part (MTB part) currently carries
some very fundamental problems:

\begin{itemize}

\item Outdated component base -- the last update of the system was
made in 2007 and currently some of the components used are unavailable. Installed
electronics manufactured in the past and used on track has no direct replacement.
This makes it impossible to expand the track with additional railways
and stations, makes it impossible to replace broken parts of the electronics
and to use electronics for other (e.g. diagnostic) purposes.

\item Unresolved licensing conditions -- the authors of the system did not
provide the source code for the firmware, electrical schematics nor PCB designs
in a source form. Thus, essentially no updates can be made, bugs cannot be fixed,
new features cannot be added.

\item Technical capabilities of the processors -- current MTB system is based
on \textit{AT89C2051} MCUs with 2~kB of flash memory, 128~B SRAM.  This capacity
is insufficient for more complex applications. The firmware cannot be extended
and the processors lack some key peripherals, e.g. EEPROM.
\end{itemize}

To enable development of the laboratory it is absolutely necessary to modernize
or replace the MTB system (the main purpose of the IGA project
PEF\_TP\_2020004). For this phase the following general requirements have been
defined resulting from the facts already mentioned:

\begin{enumerate}
\item The new system must be reasonably backward compatible with the current
track control software.
\item The new system must be reasonably backward compatible with the current
track control hardware.
\item The new system shall be sustainable for a sufficiently long time (estimated at 20 years).
\item The solution must not be costly.
\item Communication must include acknowledgement of controller actions,
the correct functionality of the modules must be detected.
\item New functions and requirements defined in the future must be
implementable, i.e. the system must be sufficiently extensible.
\end{enumerate}

It is recommended to develop the new system as an open solution, i.e., hardware
components as open hardware, all software as open source.

\kap MTB v4

Based on the current situation described in the previous chapter, we decided to
improve MTB v2 system and design its new version \textit{MTB v4}. We chose this
solution, because we perceive the advantages of in-house solution as
significant.  Furthermore, own design allows students to understand the model
railway controlling better, it allows to experiment with it, develop
alternatives and simply transform student's ideas into reality.

We chose not to use BiDiB, because the cost of deployment of the system. BiDiB
modules in general are relatively cheap, however the cost of replacing all the
modules and wiring in the existing railway is unacceptable. MTB v2 must be
simply upgradable to MTB v4.

Now we describe design of MTB v4 system.\footnote{
Full specification of MTB v4 is available at
\url{https://mtb.kmz-brno.cz/}, unformtunately in czech language only.}

\pkap Interfaces

On one side, MTB communicates with the track-side equipment (points, signals,
sections, lights, etc.) -- this must have been and was preserved. On the
other side, MTB communicates with computer. We keep using USB for this
interface, because we find no disadvantages of it. MTB v4 will be connected
to interlocking software hJOP \cite{hJOP} (currently used in
laboratory). It connects to the track via a dynamically linked library with a
defined API. New design must support multi-master control, so that the
individual elements can be controlled solely by the computer, but with multiple
applications. This design allows to connect e.g. both train interlocking
hardware and street lights hardware to a single MTB module, which is then
controlled by two different applications. This solution requires less hardware
and wiring, which is highly desirable.

Until now, two types of outputs have been used for communication with the
track-side hardware -- digital binary (for all two-state outputs) and S-COM
\cite{S-com} for transmission of signal aspects. In addition to
these two, the new system adds the so-called oscillatory output (digital signal
with frequency in small number of Hz) for indication purposes and for special
devices for train set uncoupling (uncouplers in the tracks).\footnote{The
problem of train uncoupling was dealt with in detail in the work of Z.\,Galieva
\cite{DP-Zarina}.}

\pkap Modules

It was conceptually decided not to support analog inputs and outputs or
pulse-width modulated outputs in MTB v4, because they are not needed in connected
peripherals. In case they will be needed in future, new modules will be developed.

MTB v2 uses three variants of universal IO modules -- UNI, UNIm and TTL --
which differ in their support for infrared point sensors and in type of outputs
(TTL vs open-collector). To simplify and cheapen the solution, only one
universal mass-producible module shall be developed. To connect specific
peripherals, expansion modules can be used.

\pkap Other improvements

In line with some of the above framework requirements, the new system should
be able to detect modules that are added on the bus at runtime (not just at
system start-up), as opposed to the current state. A problem in the
same category is enabling easy detection of a malfunctioning module (e.g.
during a power failure, disconnection of connectors etc.). The innovation
against the current state in this context appears to be the consistent
implementation of command acknowledgement, which will enable the above
functions.

For easy identification of a module in the track (individual modules
are positioned on the underside of the track at the locations where the
corresponding equipment is placed) it should be possible to switch on an
indication LED on it from the control computer.

Updating module firmware should be possible directly over the MTBbus.
Considering the number of modules on a large track (higher tenths or hundrets),
it is very difficult to update the firmware manually. Using more advanced
processors, this operation is achievable and allows updating of a firmware on a
module by module basis across the entire track. This entails the elimination of
errors and omissions, including the elimination of time delays in manual
updates.

\pkap MTBbus v4

The bus is designed from scratch. This is due to a number of significant
changes compared to the current state, as well as the need to resolve licensing
issues.

Hardware-wise, the RS485 standard is retained. The supported communication
speeds remain three -- 38\,400~Bd, 57\,600~Bd and 115\,200~Bd. Lower speed is
not necessary; at maximum speed, there are approximately 10 scans of each
module per second with 100 modules on the bus (real packet length taken into
account), which is enough for safety functions.

The communication is based on periodic polling all modules on the bus, each
module responds with a message. This confirms that the module is alive.
Modules that are active are polled more frequently than inactive modules to
reduce latency. However, inactive modules must be included in the queries
sometimes as well, so that it can be detected when new modules have been
connected. Some ideas how to create the communication protocol can be also
found in work of Lascano and Clyde (2016).

Message of MTBbus v4 consists of the following
parts:

\begin{itemize}
\item Module address -- 1~B, provides an address space for 255 modules, which
is sufficient (address 0 is broadcast).
\item Message length -- as opposed to the MTB v2 situation where the
maximum length could be 7~B, the length of the data part has been increased
substantially, up to 120~B, which allows sending in addition to regular
messages, firmware for module updates.
\item Message code -- a byte defining the meaning of the message.
\item Message data part -- up to 120~B of data.
\item Checksum -- compared to the MTB v2, where only XOR of the message
is calculated, MTB v4 calculates a CRC-16 checksum instead. For longer
message length in MTB v4, this type of checksum is more appropriate.
This solution is similar to ModBus \cite{ModBus} industrial bus.
\end{itemize}

The specification\footnote{Full specification is available online
\url{https://github.com/kmzbrnoI/mtbbus-protocol}.}
of MTBbus v4 is two-layered --
the protocol defines messages, but the data definition for some messages
is different for the specific MTB module types. The data format of inputs and
outputs, the configuration format of the module, addressing and memory organization for
firmware updates are defined here. This is advantageous in view of possible
further development, as the protocol can still be the same, although other
types of modules with different characteristics may be added in the future.

Particular attention in the design is paid to firmware updates of MTB modules.
The firmware update procedure is described in detail online in the document
\url{https://github.com/kmzbrnoI/mtbbus-protocol/blob/master/workflows.md}.
The update can be done while the bus is fully operational, which is a great
advantage especially if a module with a firmware of different original version is added or
replaced.

The flash memory in MTB modules can be overwritten from the bootloader. The
update protocol reboots the processor into this program. Because it is unsafe
to update the bootloader over the MTBbus, it must be a small and well tested
piece of firmware that will not need to be reprogrammed and will be loaded into
the processor only once during manufacture by programming the module directly.

The changes in the design concept of the track control electronics are
outlined in Figure \,\ref{new_mtb_schema}. The implementation is
described by Horáček (2021b, chap.\,5) in detail, here we briefly mention
key parts.

\pkap MTB-UNI v4

Instead of the several types of MTB modules, only one type was designed
with three freely adjustable options on each output pin: binary, S-COM and
oscillation mode. The \textit{MTB-UNI v4}\footnote{
\url{https://github.com/kmzbrnoI/mtb-uni-4-ele},
\url{https://github.com/kmzbrnoI/mtb-uni-4-fw}
} universal module is built on modern components, but with the expectation
of long-term availability. MTB-UNI v4 is based on ATmega128A MCU, firmware is
programmed in C.

The configuration of the module is permanently stored in the MCU. It is
necessary for example to store the communication speed of
the bus and convenient for the defined state of the outputs immediately
after the power supply is switched on. Maintaining an authoritative version
however, is handled by the computer, where all storage, backup and
versioning of configurations can be handled elegantly and much more easily.

MTB-UNI v4 PCB design is based on well known parts which are commonly used in
industry. The emphasis is placed on its protection against damage from wrong
wiring. The damage is done by connecting too high or too low voltage to the
board. In that case components may be burned. The protection is implemented
with PTCs, thyrristors and zener diodes. Big advantage in the design of
the protection is its reversible cut-off -- no fuses are burned. Example of
such circuit is a crowbar circuit (Electronics notes, 2021).

MTB-UNI v4 firmware consists of a main firmware and a bootloader firmware. The
bootloader is used for main firmware updating over MTBbus.

\pkap MTB-2-AVR

A cost-saving upgrade option was developed to keep the original MTB-UNI v2 modules, with
the original processor being replaced with a new one (ATmega328P), all other components,
cabling and mechanical parts remain. As there is not a new processor available that
matches the pinout of the original processor, an add-on \textit{MTB-2-AVR} board\footnote{
\url{https://github.com/kmzbrnoI/mtb-2-avr-pcb},
\url{https://github.com/kmzbrnoI/mtb-2-avr-fw}.} was created to slide into
the socket of the original processor. The add-on board carries the new
processor in an SMD design with the necessary additional components. By simply
replacing the processor in the original socket with the new board, a new
MTB-UNI module is created.

MTB-2-AVR firmware consists of a main firmware and a bootloader firmware. The
bootloader is used for main firmware updating over MTBbus.

\pkap IRdet

Infrared point sensors support had to be implemented in order to make the new
solution deployable on the current and the  new track where these sensors are
used. An expansion board called \textit{IRdet} was created to allow the
connection of up to 8 IR sensors. Its outputs can be connected to the inputs
of the MTB-UNI module. These outputs can also be used for other purposes (e.g.
signalling in control panels).

\pkap MTB-USB v4

Implementation of the requirements forcing a different bus operation
requires a new design of the \textit{MTB-USB v4} module\footnote{
\url{https://github.com/kmzbrnoI/mtb-usb-4-pcb},
\url{https://github.com/kmzbrnoI/mtb-usb-4-fw}}. Here, backward compatibility with
the original MTB-USB v2 board does not have to be strictly adhered to, as
this board is only one throughout track and its complete replacement is neither
technically nor financially too demanding.

PCB was designed in an open-source software KiCad, design is based on MCU
STM32F103, firmware is programmed in plain C. Firmware consists of a main firmware
and of a bootloader, which allows updating the main firmware via USB without
the need for special programmer (e.g. STlink).

\end{multicols}

\begin{figure}
\center
\includegraphics[width=.5\textwidth]{data/new_mtb_schema.pdf}
\caption{MTB v4 architecture}
\label{new_mtb_schema}
\end{figure}

\hrule
\begin{multicols}2

\kap Software

Two computer applications were developed as part of the solution --
\textit{MTB Daemon}\footnote{\url{https://github.com/kmzbrnoI/mtb-daemon}}
and a library \textit{hJOP MTB Network Library}\footnote{
\url{https://github.com/kmzbrnoI/mtb-net-lib}}.

The requirement for multi-master control was solved in such a way that the
MTB-USB v4 communicates with one application on the computer side -- MTB Daemon
--, but multiple control applications can connect do MTB Daemon via JSON REST
API and command it. This functionality, among other things, allows students in
the laboratory to program their own simple applications controlling
the tracks (IP-B project no.\,8.1.17 of 2018). The programming language of MTB
Daemon is C++17 with the Qt framework, which allows for a multi-platform
solution; compilation is possible for both Linux-type OSes, as well as Windows
type OS.

The hJOP MTB Network RCS Library interfaces the existing track control system hJOP
and MTB Daemon. It is also developed in C++ as dll library.

\kap Discussion

Implementation of the MTB v4 system and related hardware and software
components represent a solution to the necessary conditions for further
development in the Railway Vehicles Control Laboratory. Expansions are planned to
include additional station, including the locomotive depot, which will allow
to increase the operational possibilities and to address other possible
traffic situations, including various safety features and the implementation
of the train timetable.

Track management capabilities are also slightly enhanced with software
elements that can be created by students in courses related to
algorithmisation and programming techniques, in programming languages
independent on implementation of the software components of the track. In
addition, the space has been expanded for students of specialized courses and
thesis writers who can create further extensions to the control software and
solve more challenging train control operation tasks.

Compared to systems available commercially, the designed and implemented
solution has a great advantage in the openness of the hardware and
software part, thus the parts needed by different users can be used
without restrictions. In addition, the cost is lower than the components
available for conventional domestic tracks. Here a new field of application is
emerging, for which the individual components are already prepared, but
adaptation to commercial software systems has not yet been addressed.

\kap Conclusion

The upgraded system has been implemented and deployed on all tracks in the
Railway Vehicles Control Laboratory, as well as on all tracks in MRC Brno I.

In the future, the possibility of supporting higher bus speeds may be
considered, possibly automatic detection of the set speed, important when
connecting additional modules (or their replacement). An interesting
possibility could also be an extension to retransmit bus data over
wireless connection to control parts of the track that are physically separated
from the control computer due to spatial, architectural or other reasons.
An example would be a railway consent console used in a foreign station at a
modular tracks meeting, where each section of track is supplied by a different
modeller but we need to operate the track as a whole.

\npkap Acknowledgements

The upgrade of the MTB system in the Railway Vehicles Control Laboratory was
funded by the IGA team project No.\,PEF\_TP\_2020004 called
\uv{Innovation Electronic Control of Model Tracks}. A major contribution to
modernisation was made by the thesis of Jan Horáček \cite{DP-Honza}.

\begin{thebibliography}{9}

\bibitem{SoC}Anysilicon. 2021. What is a System on Chip (SoC)? [online] [vid. 20. 5. 2021]
Available at \url{https://anysilicon.com/what-is-a-system-on-chip-soc/}
\bibitem{S-com}Báňa, V. 2021. Dekodér S-com pro světelná návěstidla ČSD [online]
[vid. 20. 4. 2021] Available at \url{https://www.mtb-model.com/elektro/s-com-nav.htm}
\bibitem{MTB}Báňa, V., Trávník, P. 2021. Komunikační protokol modulů MTB [online].
[vid. 28. 4. 2021]. Available at \url{https://mtb.kmz-brno.cz/assets/pdf/mtb-protok20.pdf}.
\bibitem{BiDiB}BiDiB. 2021. Kurzzusammendfassung von BiDiB [online] [vid. 26. 4. 2021]
Available at \url{http://bidib.org/protokoll/intro.html}.
\bibitem{LocoNET}DCC WIKI. 2021a. LocoNet overview [online]. [vid. 26. 4. 2021]. Available at
\url{https://dccwiki.com/LocoNet}.
\bibitem{RailCom}DCC WIKI. 2021b. RailCom and RailComPlus [online]. [vid. 3. 5. 2021].
Available at \url{https://dccwiki.com/Term:RailCom}.
\bibitem{ElNotes}Electronic notes. 2021. SCR Thyristor Crowbar: overvoltage protection circuit. [online]
Available at \url{https://www.electronics-notes.com/articles/analogue_circuits/thyristor-scr-triac/}\\
\url{overvoltage-protection-crowbar-circuit.php}
\bibitem{DP-Zarina}Galieva, Z. 2020. Automatizace objíždění souprav na modelovém
kolejišti. Diploma thesis. Supervisor: Jiří Rybička. MENDELU.
\bibitem{geeks}Geeksforgeeks. 2020. Difference between MCU and SoC. [online]
Available at \url{https://www.geeksforgeeks.org/difference-between-mcu-and-soc/}
\bibitem{Gridling}Gridling, G., Weiss, B. 2007. Introduction to
Microcontrollers. [online] Vienna University of Technology. Available at
\url{https://ti.tuwien.ac.at/ecs/teaching/courses/mclu/theory-material/Microcontroller.pdf}
\bibitem{hJOP}Horáček, J. 2021a. hJOP: systém RCS [online]. [vid. 3. 5. 2021].
Available at \url{https://hjop.kmz-brno.cz/rcs}.
\bibitem{DP-Honza}Horáček, J. 2021b. Návrh a implementace nového protokolu
sběrnice MTBbus. Diploma thesis. Supervisor: Zdeněk Matěj. MU in Brno.
\bibitem{Lascano}Lascano, J.\,E., Clyde, S.\,W. 2016. A Pattern Language for
Application-level Communication Protocols. [online] In: The Eleventh International
Conference on Software Engineering Advances. ISBN 978-1-61208-498-5. Available at
\url{https://www.academia.edu/31103209/A_Pattern_Language_for_Application_level_Communication_Protocols}
\bibitem{ModBus}Modbus Organization Inc. 2021. ModBus Application Protocol
Specification [online].  [vid. 4. 5. 2021]. Available at \url{https://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b3.pdf}.
\bibitem{DCC}NMRA. 2021. Electrical Standards for Digital Command Control. [online]
Available at \url{https://www.nmra.org/sites/default/files/standards/sandrp/pdf/s-9.1_electrical_standards_for_digital_command_control_2021.pdf}
Last rev. Apr 9, 2021
\bibitem{S88}OPENDCC. 2021. Transmission of S88 data over network cable [online].
2021 [vid. 26. 4. 2021]. Available at \url{https://www.opendcc.de/s88/s88_n/s88-n_e.html}.
\bibitem{RSbus}Pras, A. 2021. RSbus Arduino Library [online].  [vid. 26. 4. 2021].
Available at \url{https://github.com/aikopras/RSbus}.
\bibitem{Thornton}Thornton, S. 2017. Microcontrollers vs. Microprocessors:
What’s the difference? [online] Microcontroller Tips. Available at
\url{https://www.microcontrollertips.com/microcontrollers-vs-microprocessors-whats}\\\url{-difference/}
\bibitem{DCC-wiki}Wikipedia. 2021. Digital Command Control [online]
Available at \url{https://en.wikipedia.org/wiki/Digital_Command_Control}

\end{thebibliography}

\end{multicols}
\end{document}
